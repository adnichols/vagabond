#!/usr/bin/env ruby

Signal.trap('INT'){ exit 255 }

require 'rubygems'
require 'vagabond'

if(ARGV.include?('--version') || ARGV.include?('-v'))
  require 'vagabond/vagabond'
  Vagabond::Vagabond.new.send(:version)
elsif(%w(help --help -h).include?(ARGV.first))
  puts "-- Vagabond --\n"
  require 'vagabond/vagabond'
  Object.send(:remove_const, :ARGV)
  ARGV = %w(help)
  Vagabond::Vagabond.start
  %w(server knife kitchen spec).each do |key|
    puts "-- #{key.capitalize} --\n"
    require "vagabond/#{key}"
    Object.send(:remove_const, :ARGV)
    ARGV = %w(help)
    Vagabond.const_get(key.capitalize).start
  end
else
  require 'etc'

  unless(Etc.getlogin == 'root' || ARGV.first == 'init')
    require 'vagabond/vagabondfile'
    vagabondfile = Vagabond::Vagabondfile.new
    command = []
    sudo = vagabondfile[:sudo]
    unless(sudo == false)
      command.push sudo.is_a?(String) ? sudo : 'sudo'
    end
    if(defined?(Bundler))
      command << 'bundle exec'
    end
    command << $PROGRAM_NAME.sub(Dir.pwd, '')
    command += ARGV
    exec(command.join(' '))
  end

  case arg = ARGV.shift
  when 'server'
    require 'vagabond/server'
    Vagabond::Server
  when 'knife'
    require 'vagabond/knife'
    ARGV.unshift(arg) unless ARGV.empty?
    Vagabond::Knife
  when 'test', 'kitchen'
    require 'vagabond/kitchen'
    Vagabond::Kitchen
  when 'spec'
    require 'vagabond/spec'
    Vagabond::Spec
  else
    require 'vagabond/vagabond'
    ARGV.unshift(arg)
    Vagabond::Vagabond
  end.start
end
